{"version":3,"sources":["utils/API.js","components/Concern.js","components/pages/Home.js","components/pages/LandingPage.js","App.js","registerServiceWorker.js","index.js"],"names":["axios","defaults","headers","put","post","API","updateLastCheck","concernId","moment","require","last_check","format","then","response","console","log","catch","error","displayConcerns","get","Concern","props","react_default","a","createElement","name","Home","_useState","useState","_useState2","Object","slicedToArray","concerns","setConcerns","useEffect","data","className","map","concern","components_Concern","LandingPage","match","params","id","location","useLocation","react_router_dom","to","pathname","style","color","App","react_router","exact","path","component","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.47ccfc20.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\naxios.defaults.headers.put['Content-Type'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\n\nexport default {\n    updateLastCheck: (concernId) => {\n        var moment = require('moment');\n        return axios.put(\"/concerns/\" + concernId, {\n            last_check: moment().format(\"ddd, MMM Do YYYY, h:mm:ss a\")\n            })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    },\n\n    displayConcerns: () => {\n        return axios.get(\"/concerns\")\n        .then(function (response) {\n            console.log(response);\n            return response;\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n    }\n};","import React from \"react\";\n\nfunction Concern(props) {\n\n    return (\n        <li>{props.name}, {props.last_check}</li>\n    );\n}\n\nexport default Concern;","import React, { useState, useEffect } from \"react\";\nimport API from \"../../utils/API\";\nimport Concern from \"../Concern\";\nimport \"./project3.css\";\n\nfunction Home() {\n\n    const [concerns, setConcerns] = useState([]);\n    \n\n    useEffect(() => {\n        API.displayConcerns().then((response) => {\n            setConcerns(response.data);\n        })\n    }, []);\n\n    return (\n        <div>\n            <div className=\"field is-grouped is-grouped-centered\">\n                <h1 className=\"title\">\n                    Forget Me Not\n            </h1>\n            </div>\n            <br />\n            <div className=\"field is-grouped is-grouped-centered\">\n                <div className=\"box\">\n                    <ul>\n                    {concerns.map(concern => (\n                        <Concern\n                        name={concern.name}\n                        last_check={concern.last_check}\n                    />\n                    ))}\n                    </ul>\n                </div>\n            </div>\n            <br />\n            <div className=\"container\">\n                <div className=\"field is-grouped is-grouped-centered\">\n                    <div> <button className=\"button\">Login</button></div>\n\n                    <div><button className=\"button is-link\">Signup</button></div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;","import React, { useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport API from \"../../utils/API\";\nimport \"./project3.css\";\n\nfunction LandingPage(props) {\n  console.log(props.match.params.id);\n  const concernId = props.match.params.id;\n\n  useEffect(() => {\n    API.updateLastCheck(concernId);\n  }, [concernId]);\n\n  const location = useLocation();\n\n  return (\n    <div>\n      <section className=\"section\">\n        <div className=\"field is-grouped is-grouped-centered\">\n            <h1 className=\"title\">\n                Forget Me Not\n            </h1>\n        </div>\n        <div className=\"field is-grouped is-grouped-centered\">\n            <button className=\"button is-link\">Scan Successful!</button>\n        </div>\n        <form>\n            <div className=\"field is-grouped is-grouped-centered\">\n                <button className=\"button is-hsl(271, 100%\">\n                  <Link to=\"/\" className={location.pathname === \"/\" ? \"nav-link active\" : \"nav-link\"} style={{color: \"white\"}}>\n                      Home\n                  </Link>\n                </button>\n            </div>\n        </form>\n    </section>\n    </div>\n  );\n}\n\nexport default LandingPage;","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./components/pages/Home\";\nimport LandingPage from \"./components/pages/LandingPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/landingpage/:id\" component={LandingPage} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}